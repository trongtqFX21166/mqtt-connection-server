// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VmlMQTT.Infratructure.Data;

#nullable disable

namespace VmlMQTT.Infratructure.Migrations
{
    [DbContext(typeof(VmlMQTTDbContext))]
    [Migration("20250514171744_addColumnDeviceInfo")]
    partial class addColumnDeviceInfo
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VmlMQTT.Core.Entities.EmqxBrokerHost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LimitConnections")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("PublicIp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PublicPort")
                        .HasColumnType("integer");

                    b.Property<int>("TotalAccounts")
                        .HasColumnType("integer");

                    b.Property<int>("TotalConnections")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EmqxBrokerHosts");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.User", b =>
                {
                    b.Property<int>("VMLUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedBy")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VMLUserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.UserDeviceId", b =>
                {
                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeviceInfo")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UniqueId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDeviceIds");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.UserSession", b =>
                {
                    b.Property<Guid>("UniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("BrokerHostId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("PubTopics")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.PrimitiveCollection<List<string>>("SubTopics")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long>("TimestampUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UniqueId");

                    b.HasIndex("BrokerHostId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.UserDeviceId", b =>
                {
                    b.HasOne("VmlMQTT.Core.Entities.User", "User")
                        .WithMany("UserDeviceIds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.UserSession", b =>
                {
                    b.HasOne("VmlMQTT.Core.Entities.EmqxBrokerHost", "BrokerHost")
                        .WithMany("UserSessions")
                        .HasForeignKey("BrokerHostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VmlMQTT.Core.Entities.User", "User")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrokerHost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.EmqxBrokerHost", b =>
                {
                    b.Navigation("UserSessions");
                });

            modelBuilder.Entity("VmlMQTT.Core.Entities.User", b =>
                {
                    b.Navigation("UserDeviceIds");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
